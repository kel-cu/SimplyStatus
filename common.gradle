apply plugin: 'maven-publish'
apply plugin: 'dev.architectury.loom'
apply plugin: 'com.replaymod.preprocess'
apply plugin: 'me.fallenbreath.yamlang'
apply plugin: 'io.github.goooler.shadow'
apply plugin: 'com.modrinth.minotaur'

def mod_brand = project.name.endsWith("-common") ? 'common' : (loom.platform.get() as String).toLowerCase()
assert mod_brand in ['fabric', 'forge', 'neoforge', 'common']
archivesBaseName = (project.archives_base_name == null ? rootProject.archives_base_name : project.archives_base_name) + "-" + mod_brand
group = rootProject.maven_group

int mcVersion = 1
preprocess {
    mcVersion = vars.get()["MC"] as int
    tabIndentation = true
    vars.put("MC", mcVersion)
    vars.put("FABRIC", mod_brand == 'fabric' ? 1 : 0)
    vars.put("FORGE", mod_brand == 'forge' ? 1 : 0)
    vars.put("NEOFORGE", mod_brand == 'neoforge' ? 1 : 0)
}

repositories {
    mavenCentral()
    maven { url = "https://s01.oss.sonatype.org/content/repositories/releases" }
    maven { url = "https://maven.terraformersmc.com/releases" }
    maven { url = "https://maven.neoforged.net/releases/" } // NEOFORGE
    maven { url = "https://maven.meteordev.org/releases" }
    maven { url = 'https://repo.kelcuprum.ru/snapshots' }
    maven { url = 'https://repo.kelcuprum.ru/releases' }
    maven { url = 'https://repo.kelcuprum.ru/forks' }
    maven { url = 'https://repo.kelcuprum.ru/test' }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = "https://maven.parchmentmc.org" } // MAPPINGS
    maven { url = "https://jitpack.io/" }
}
configurations {
    modRuntimeOnly.exclude group: 'net.fabricmc', module: 'fabric-loader'
}
loom {
    runConfigs.client {
        // to make sure it generates all "Minecraft Client (:subproject_name)" applications
        ideConfigGenerated = true
        runDir '../../run'
        vmArgs '-Dmixin.debug.export=true'
    }
}
remapJar {
    remapperIsolation = true
    injectAccessWidener = true
}

configurations {
    shade
    implementation.extendsFrom shade
    // Include dep in fat jar with relocation and minimization
    shadow
    implementation.extendsFrom shadow
}
dependencies {
    // loom
    implementation("com.google.code.gson:gson:2.10.1")
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
    }
    // Требующие библиотеки
    shade(implementation("com.kohlschutter.junixsocket:junixsocket-common:2.7.0"))
    shade(implementation("com.kohlschutter.junixsocket:junixsocket-native-common:2.7.0"))
    shade(implementation("io.github.CDAGaming:DiscordIPC:0.10.0"))

    // Поддержка модов
    modCompileOnly "maven.modrinth:replaymod:${project.replaymod}"
    modCompileOnly "maven.modrinth:plasmo-voice:${project.plasmovoice}"
    modCompileOnly "maven.modrinth:simple-voice-chat:${project.svc}"
    modCompileOnly "maven.modrinth:waterplayer:${project.waterplayer}"
    modCompileOnly "maven.modrinth:flashback:${project.flashback}"

    implementation("meteordevelopment:starscript:0.3.4")

    if (mod_brand == 'fabric') {
        modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
        modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
        modImplementation "ru.kelcuprum.alinlib:AlinLib-fabric:${rootProject.alinlib}+mc${project.alinlib_minecraft_version == null ? project.minecraft_version : project.alinlib_minecraft_version}"
    }


    subprojects.each {
        implementation project(path: ":${it.name}", configuration: 'namedElements')
        implementation project(path: ":${it.name}", configuration: 'shade')
        include project("${it.name}:")
    }
}

int JAVA_COMPATIBILITY
if (mcVersion >= 12005) JAVA_COMPATIBILITY = 21
else JAVA_COMPATIBILITY = 17

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = JAVA_COMPATIBILITY
}

shadowJar {
    configurations = [project.configurations.shade]
    destinationDirectory.set(layout.buildDirectory.dir('devlibs'))
}

remapJar {
    dependsOn tasks.shadowJar
    inputFile.set(tasks.shadowJar.archiveFile)
}

components.java.withVariantsFromConfiguration(configurations.shadowRuntimeElements) { skip() }

jar {
    from("LICENSE.md") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

version = project.mod_version + "+mc" + project.minecraft_version

processResources {
    inputs.property "version", version
    inputs.property "minecraft_dependency", project.minecraft_dependency

    [
            'fabric'  : ['fabric.mod.json'],
            'neoforge': ['META-INF/neoforge.mods.toml'],
            'forge'   : ['META-INF/mods.toml', 'pack.mcmeta'],
    ].forEach { brand, files ->
        files.forEach { name ->
            if (brand == mod_brand) {
                filesMatching(name) {
                    def valueMap = [
                            "version"             : version,
                            "minecraft_dependency": project.minecraft_dependency,
                    ]
                    expand valueMap
                }
            } else {
                exclude name
            }
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN") // Remember to have the MODRINTH_TOKEN environment variable set or else this will fail - just make sure it stays private!
    versionName = project.modrinth_title != null ? project.modrinth_title + " " + rootProject.mod_version : rootProject.mod_version
    projectId = "sailstatus" // This can be the project ID or the slug. Either will work!
    // You don't need to set this manually. Will fail if Modrinth has this version already
    changelog = file("../../changelog.md").text
    versionNumber = rootProject.mod_version
    versionType = rootProject.version_type // This is the default -- can also be `beta` or `alpha`
    uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
    project.modrinth_versions.split(", ").each {
        gameVersions.add it
    }
    if(mod_brand == "fabric") loaders = ["fabric", "quilt"]
    else loaders = [mod_brand]
    dependencies {
        required.project "alinlib"
        if(mod_brand == "fabric"){
            required.project "fabric-api"
            optional.project "modmenu"
        }
    }
}
