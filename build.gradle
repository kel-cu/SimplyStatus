plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases" }
    jcenter()
    maven {
        url = "https://jitpack.io/"
    }
}

dependencies {
    // Версии Minecraft and Fabric
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API и API модов
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modApi("me.shedaniel.cloth:cloth-config-fabric:6.1.48") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation "com.terraformersmc:modmenu:3.0.0"

    // Прочея херня для работы с конфигами и Discord RPC
    include(implementation ('club.minnced:discord-rpc-release:v3.4.0'))
    include(implementation("com.github.MinnDevelopment:java-discord-rpc:v2.0.2"))
    // Для библиотеки org.json внутри самого мода
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'com.jayway.jsonpath:json-path:2.1.0'
    testImplementation 'org.mockito:mockito-core:1.9.5'

}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {
    }
}
