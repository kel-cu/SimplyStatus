plugins {
    id 'dev.architectury.loom' version '1.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'maven-publish'
}

apply plugin: 'com.github.johnrengelman.shadow'
version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven { url = "https://maven.terraformersmc.com/releases" }
    maven { url = "https://maven.meteordev.org/releases" }
    maven { url = 'https://repo.kelcuprum.ru/snapshots' }
    maven { url = 'https://repo.kelcuprum.ru/releases' }
    maven { url = 'https://repo.kelcuprum.ru/forks' }
    maven { url = 'https://repo.kelcuprum.ru/test' }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = "https://maven.parchmentmc.org" } // MAPPINGS
    maven { url = "https://jitpack.io/" }
}

configurations { shade }
dependencies {
    // Minecraft/Fabric libs
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment "org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip"
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    // Discord Integration
    include(implementation("com.kohlschutter.junixsocket:junixsocket-common:2.7.0"))
    include(implementation("com.kohlschutter.junixsocket:junixsocket-native-common:2.7.0"))
    include(implementation("com.jagrosh.discordipc:DiscordIPC:0.6.0"))
    // Mods libs
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    modImplementation "maven.modrinth:replaymod:${project.replaymod}"
    modImplementation "maven.modrinth:plasmo-voice:${project.plasmovoice}"
    modImplementation "maven.modrinth:simple-voice-chat:${project.svc}"
    modImplementation "ru.kelcuprum.alinlib:AlinLib-fabric:${project.alinlib}"
    modImplementation "ru.kelcuprum.waterplayer:WaterPlayer:${project.waterplayer}"
    include(implementation("meteordevelopment:starscript:0.2.2"))

    subprojects.each {
        implementation project(path: ":${it.name}", configuration: 'namedElements')
        implementation project(path: ":${it.name}", configuration: 'shade')
        include project("${it.name}:")
    }
}


processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

test {
    useJUnitPlatform()
}

// Produce additional distributions
java {
    withSourcesJar()
}

// Produce a fat-jar of all shaded dependencies
shadowJar {
    configurations = [project.configurations.shade]
    destinationDirectory.set(layout.buildDirectory.dir('devlibs'))
}

remapJar {
    dependsOn tasks.shadowJar
    inputFile.set(tasks.shadowJar.archiveFile)
}

components.java.withVariantsFromConfiguration(configurations.shadowRuntimeElements) { skip() }

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}